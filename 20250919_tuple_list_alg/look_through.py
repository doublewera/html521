# Просмотр последовательности
# Типовые задачи:
# Есть последовательность 
# (строка, список, кортеж, словарь, диапазон....) 
# требуется её "просмотреть", "пробежать", "про-scroll-ить" т.е. 
# либо вывести все элементы на экран (в прямом, обратном и других порядках) 
# либо "прочитать" (обратиться на чтение) и вычислить что-то 
#   на основе таких элементов, например 
#   все квадраты чисел 
#   все нечетные числа 
#   все строки, длина которых больше 3 и меньше 7 и т.д. 
# либо создать новую последовательность и т.д.
# Алгоритм: создать цикл и допустимым способом обращаться к последовательности 
# идеально - for

# Пример задачи: есть список [1, 3, 5, 7, 9]
# Вывести все элементы на экран

# Решение алгоритмическое: 
# 1. создать переменную, хранящую список 
# 2. создать цикл for (перебор) для всех элементов 
# 3. в теле цикла использовать функцию print

# Решение синтаксическое:
# Переменная создается с помощью знака =
# Перебор  for elem in ПОСЛЕДОВАТЕЛЬНОСТЬ: (это заголовок)
# Тело перебора должно иметь отступ на 4 пробела вправо по сравнению с заголовком перебора


# Решение:
spisok = [1, 3, 5, 7, 9]
for elem in spisok:
    print(elem)

# Пример задачи "вычислить что-то на основании последовательности"
# Есть список строк. Вывести для каждой строки её длину

# Решение алгоритмическое: 
# 1. создать переменную, хранящую список
# 2. Создать цикл, просматривающий весь список строк
# (типа как библиотекарь, которому привезли стопку новых книг 
# - он для каждой заводит карточку. 
#     Берет книгу - заводит,
#     берет - заводит...)
# Тело цикла - это то, что делает цикл много раз. Каждый раз.
# 3. Тело цикла должно: посчитать длину, вывести строку, вывести длину


# Решение синтаксическое:
# Переменная создается с помощью знака =
# Перебор  for elem in ПОСЛЕДОВАТЕЛЬНОСТЬ: (это заголовок)
# Тело перебора должно иметь отступ на 4 пробела вправо по сравнению с заголовком перебора
# Для расчета длины строки в питоне используется функция len()
# Для вывода на экран print()

stroki = ['Академия', 'ТОП', 'просто', 'самый', 'топ!']
for stroka in stroki:
    dlina = len(stroka)
    print(stroka, dlina)

# Можно - короче:
stroki = ['Академия', 'ТОП', 'просто', 'самый', 'топ!']
for stroka in stroki:
    print(stroka, len(stroka))


# Пример задачи на создание новой последовательности по имеющейся
# Есть список имен
# Создать в обратном порядке список первых букв имен

# Решение алгоритмическое:
# Для получения перевернутого списка можно использовать: 
#    slice [-1::-1] 
#    while i > -1: ...  # Заранее создать i = len(lst) - 1
# Для просмотра списка хорошо использовать перебор for 
# ==== появилось пожже!!! ===== СОЗДАТЬ НОВЫЙ ПУСТОЙ СПИСОК - РЕЗУЛЬТАТ! (Обычно про это вспоминают, когда понимают, что не понимают, куда собственно, добавлять элементы)
# Тело цикла должно ДОБАВЛЯТЬ первую букву (тоже позже приписали:) В НОВЫЙ СПИСОК
#     откуда её взять? Строка допускает обращение к буквам по номеру, начиная с 0 

# Решение синтаксическое:
# Переменная создается с помощью знака =
# Переменная для пустого списка создается = []  # равно и две квадратные скобки
# Перебор for elem in ПОСЛЕДОВАТЕЛЬНОСТЬ[-1::-1]: (это заголовок)
# Тело перебора должно иметь отступ на 4 пробела вправо по сравнению с заголовком перебора
#    первая буква вот: elem[0]
#    добавить в список: lst.append()

imena = ['Вера', 'Гайк', 'Дас', 'Илья']
bukvi = []
for elem in imena[-1::-1]:
    bukvi.append(elem[0])
print(bukvi)


# Задачи:
# 1. Есть список фруктов. Вывести его на печать
# 2. Есть список валют. Вывести на печать только длины их названий
# 3. Есть список чисел от 5 до 15 подряд. Создать новый список из их кубов (6*6*6 - куб шести)