# Создание функции
# def - кллючевое слово , от define (определить)
# имя функции - должно быть говорящим, что она делает!
# (параметры) - их может не быть, но скобки все равно нужны
# двоеточие в конце заголовка - сигнатуры (от слова signature - "подпись")
# новая строка
# отступы у всех вложенных строк

def lineAB(x):
    return 3*x + 2  # Мы задали линейную функцию,
                    # с её помощью можно определить ординату
                    # для любой абсциссы
                    # y = kx+b; k = 3, b = 2

def congratulations_letter(
        name,
        fathername,
        anniversary):  #  сигнатура - заголовок
    return f'''Здравствуйте, {name} {fathername}!
        Поздравляем Вас с {anniversary} и желаем здоровья и счастья!
        С уважением и любовью, Ваши Друзья!
    '''

def good_bye():
    return 'Bye-bye!'


def kuku():
    c = 5 + 6  # вычисление

# Применение функций - вызовы!
# Знакомые примеры:
print('Мне нравится писать с фукциями!', '\nWera')

# Разница между вызовом и объявлением - отсутсвие def и двоеточия!

# return - возврат результата из функции, то есть
# в том месте кода (в процессе его исполнения), где была вызвана функция,
# появится результат, который она не только вычислила, но и который размещен 
# после этого ключевого слова

result = good_bye()

# КАК ЭТО ВЫГЛЯДИТ В ПРОЦЕССЕ ИСПОЛНЕНИЯ КОДА ИНТЕРПРЕТАТОРОМ:
# result = 'Bye-bye!'

print(f'Функция goob_bye() вернула {good_bye()}')

# Если вы не пишете return...
print(f'Функция kuku() возвращает ... {kuku()}!')


# Пример: функция "вскипятить воду"
def boil_water():
    print("Налить воду")
    print("Включить чайник")
    print("Дождаться кипения")

